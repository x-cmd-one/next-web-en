import{_ as o,C as l,o as n,c as s,H as i,w as a,k as e,a as t}from"./chunks/framework.98e11516.js";const R=JSON.parse('{"title":"glow","titleTemplate":"x-cmd package | glow is a terminal based markdown reader","description":"x-cmd package glow | glow is a terminal based markdown reader","frontmatter":{"name":"glow","titleTemplate":"x-cmd package | glow is a terminal based markdown reader","head":[["meta",{"name":"og:title","content":"glow | x-cmd package"}],["meta",{"name":"og:description","content":"glow is a terminal based markdown reader"}],["meta",{"name":"description","content":"x-cmd package glow | glow is a terminal based markdown reader"}]],"links":[{"type":"1min","text":"glow","link":"/1min/glow"},{"type":"mod","text":"`x env` => usage","link":"/mod/env"}],"homepage":"https://github.com/charmbracelet/glow","license":"MIT","version":{"stable":"v0.0.1"},"support":["linux/arm64","darwin/arm64","linux/x64","darwin/x64","win/x64"],"source":{"repack-official":["https://github.com/x-cmd-build/glow/releases","https://gitcode.net/x-cmd-build/glow/-/releases"]},"aside":false,"outline":false,"x-term-speg":"pkg/glow.en","x-term-name":"glow","x-term-desc":"glow is a terminal based markdown reader","x-term-size":"large"},"headers":[],"relativePath":"pkg/glow.md","filePath":"pkg/glow.md"}'),c={name:"pkg/glow.md"},d=e("h1",{id:"glow",tabindex:"-1"},[t("glow "),e("a",{class:"header-anchor",href:"#glow","aria-label":'Permalink to "glow"'},"​")],-1),h=e("p",{class:"x-desc"},"glow is a terminal based markdown reader",-1),m=e("h2",{id:"abstract",tabindex:"-1"},[t("Abstract "),e("a",{class:"header-anchor",href:"#abstract","aria-label":'Permalink to "Abstract"'},"​")],-1),g=e("p",null,[t("Glow was developed by the "),e("a",{href:"https://charm.sh/",target:"_blank",rel:"noreferrer"},"Charm"),t(" organization in 2019 using the Go programming language. It can render Markdown text content with syntax highlighting in the command-line terminal, aiming to provide a better reading experience in the terminal.")],-1),u=e("h2",{id:"get-started-for-first-time-users",tabindex:"-1"},[t("Get Started for First-Time Users "),e("a",{class:"header-anchor",href:"#get-started-for-first-time-users","aria-label":'Permalink to "Get Started for First-Time Users"'},"​")],-1),p=e("ol",null,[e("li",null,"This document demonstrates how to quickly use Glow with x-cmd to retrieve and render Markdown files from a local directory for reading."),e("li",null,[t("x-cmd provides a "),e("a",{href:"/1min/glow"},"1-Minute Glow Tutorial"),t(" for an immediate experience.")])],-1),w=e("h2",{id:"key-features",tabindex:"-1"},[t("Key Features "),e("a",{class:"header-anchor",href:"#key-features","aria-label":'Permalink to "Key Features"'},"​")],-1),f=e("ol",null,[e("li",null,[e("strong",null,"Syntax Highlighting"),t(": Glow comes with "),e("a",{href:"https://github.com/charmbracelet/glamour/blob/master/styles/gallery/README.md",target:"_blank",rel:"noreferrer"},"built-in style themes"),t(" and will attempt to detect the current terminal's background color to choose between dark and light themes. You can also specify a "),e("a",{href:"https://github.com/charmbracelet/glamour/tree/master/styles",target:"_blank",rel:"noreferrer"},"custom JSON stylesheet"),t(" for customized rendering.")]),e("li",null,[e("strong",null,"Pagination"),t(": In interactive mode, Glow defaults to using a pagination reader for a better reading experience. It uses the same keyboard shortcuts as less, and you can list usage instructions using "),e("kbd",null,"?"),t(".")]),e("li",null,[e("strong",null,"Local Markdown File Search"),t(": By simply running the command, Glow can search for Markdown files in the current directory and its subdirectories or in the current Git repository.")]),e("li",null,[e("strong",null,"Retrieve Markdown Files Remotely"),t(": Glow supports retrieving Markdown content from GitHub, GitLab, or remote URLs and rendering them in the terminal.")]),e("li",null,[e("strong",null,"Cloud Storage and Encryption"),t(": Glow can store Markdown files in "),e("a",{href:"https://charm.sh/cloud/",target:"_blank",rel:"noreferrer"},"Charm Cloud"),t(" and encrypt the content using "),e("a",{href:"https://github.com/charmbracelet/glow#-encryption-how-it-works",target:"_blank",rel:"noreferrer"},"local SSH encryption"),t(".")])],-1),b=e("h2",{id:"lack-of-streaming-rendering-support",tabindex:"-1"},[t("Lack of Streaming Rendering Support "),e("a",{class:"header-anchor",href:"#lack-of-streaming-rendering-support","aria-label":'Permalink to "Lack of Streaming Rendering Support"'},"​")],-1),k=e("p",null,"In the use of data stream pipelines, Glow needs to wait for the upper-level Markdown data stream to be fully transmitted before rendering. This should be noted when stream-reading large data text or in scenarios where efficient rendering is required.",-1),x=e("h2",{id:"similar-tools",tabindex:"-1"},[t("Similar Tools "),e("a",{class:"header-anchor",href:"#similar-tools","aria-label":'Permalink to "Similar Tools"'},"​")],-1),_=e("ul",null,[e("li",null,[t("bat is a modern replacement for the "),e("code",null,"cat"),t(" command written in Rust. It is widely used for syntax highlighting of various text formats. x-cmd also includes Bat, and interested readers can refer to "),e("a",{href:"/pkg/bat"},"x-cmd pkg bat"),t(".")])],-1),y=e("h2",{id:"further-exploration",tabindex:"-1"},[t("Further Exploration "),e("a",{class:"header-anchor",href:"#further-exploration","aria-label":'Permalink to "Further Exploration"'},"​")],-1),v=e("ul",null,[e("li",null,[e("a",{href:"https://github.com/charmbracelet/glow",target:"_blank",rel:"noreferrer"},"GitHub: glow")]),e("li",null,[e("a",{href:"https://itsfoss.com/glow-cli-tool-markdown/",target:"_blank",rel:"noreferrer"},"Read and Organize Markdown Files in Linux Terminal With Glow")])],-1),E=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki github-dark vp-code-dark"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#79B8FF"}},"x"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"env"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"use"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"glow")])])]),e("pre",{class:"shiki github-light vp-code-light"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#005CC5"}},"x"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"env"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"use"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"glow")])])])],-1);function F(G,S,C,P,M,T){const r=l("PackagePage");return n(),s("div",null,[i(r,null,{default:a(()=>[d,h]),abstract:a(()=>[m,g,u,p,w,f,b,k,x,_,y,v]),install:a(()=>[E]),_:1})])}const I=o(c,[["render",F]]);export{R as __pageData,I as default};
