import{_ as r,C as o,o as l,c as i,H as s,w as n,k as e,a}from"./chunks/framework.98e11516.js";const S=JSON.parse('{"title":"hyperfine","titleTemplate":"x-cmd package | A command-line benchmarking tool.","description":"x-cmd package hyperfine | A command-line benchmarking tool.","frontmatter":{"name":"hyperfine","titleTemplate":"x-cmd package | A command-line benchmarking tool.","head":[["meta",{"name":"og:title","content":"hyperfine | x-cmd package"}],["meta",{"name":"og:description","content":"A command-line benchmarking tool."}],["meta",{"name":"description","content":"x-cmd package hyperfine | A command-line benchmarking tool."}]],"links":[{"type":"1min","text":"hyperfine","link":"/1min/hyperfine"},{"type":"mod","text":"`x env` => usage","link":"/mod/env"}],"homepage":"https://github.com/sharkdp/hyperfine","license":"MIT","version":{"stable":"v0.0.1"},"support":["darwin/x64","darwin/arm64","linux/x64","linux/arm64","win/x64"],"source":{"repack-official":["https://github.com/x-cmd-build/hyperfine/releases","https://gitcode.net/x-cmd-build/hyperfine/-/releases"]},"aside":false,"outline":false,"x-term-speg":"pkg/hyperfine.en","x-term-name":"hyperfine","x-term-desc":"A command-line benchmarking tool.","x-term-size":"large"},"headers":[],"relativePath":"pkg/hyperfine.md","filePath":"pkg/hyperfine.md"}'),c={name:"pkg/hyperfine.md"},d=e("h1",{id:"hyperfine",tabindex:"-1"},[a("hyperfine "),e("a",{class:"header-anchor",href:"#hyperfine","aria-label":'Permalink to "hyperfine"'},"​")],-1),h=e("p",{class:"x-desc"},"A command-line benchmarking tool.",-1),m=e("h2",{id:"introduction",tabindex:"-1"},[a("Introduction "),e("a",{class:"header-anchor",href:"#introduction","aria-label":'Permalink to "Introduction"'},"​")],-1),p=e("p",null,"hyperfine is an open-source tool for command-line benchmarking that analyzes the time of multiple command runs, helping developers evaluate and compare the performance of different commands or scripts. It is developed in the Rust language and can run on Windows, macOS, and Linux.",-1),u=e("h2",{id:"first-time-users",tabindex:"-1"},[a("First-time Users "),e("a",{class:"header-anchor",href:"#first-time-users","aria-label":'Permalink to "First-time Users"'},"​")],-1),f=e("ol",null,[e("li",null,[e("code",null,"hyperfine <command> ..."),a(" can be used to perform basic tests on commands.")]),e("li",null,[a("This article demonstrates how to use hyperfine to test the "),e("code",null,"ls"),a(" and "),e("code",null,"sleep"),a(" commands and export the results to a Markdown file.")]),e("li",null,[a("x-cmd also provides a "),e("a",{href:"/1min/hyperfine"},"1-minute tutorial"),a(" to help you get started quickly.")])],-1),b=e("h2",{id:"features",tabindex:"-1"},[a("Features "),e("a",{class:"header-anchor",href:"#features","aria-label":'Permalink to "Features"'},"​")],-1),y=e("ol",null,[e("li",null,[a("Statistical analysis of multiple runs. "),e("ul",null,[e("li",null,[a("By default, at least 10 benchmark tests are performed for each command, with a minimum measurement of 3 seconds. The number of runs can be controlled using the "),e("code",null,"-r/--runs"),a(" parameter.")])])]),e("li",null,"Support for any shell command."),e("li",null,"Continuous feedback on benchmark progress and current estimates, with the ability to detect outliers."),e("li",null,[a("Warmup runs and pre-commands for more accurate and reliable test results. "),e("ul",null,[e("li",null,[a("To run benchmark tests on a warm cache, the "),e("code",null,"-w/--warmup"),a(" option can be used to specify the number of warmup runs to be executed before the actual benchmark test.")]),e("li",null,[a("To run benchmark tests on a cold cache, the "),e("code",null,"-p/--prepare"),a(" option can be used to specify a command to be run before each timing run, clearing the cache.")])])]),e("li",null,"Export results in various formats: CSV, JSON, Markdown, AsciiDoc.")],-1),g=e("h2",{id:"competitors-and-related-works",tabindex:"-1"},[a("Competitors and Related Works "),e("a",{class:"header-anchor",href:"#competitors-and-related-works","aria-label":'Permalink to "Competitors and Related Works"'},"​")],-1),k=e("ul",null,[e("li",null,[e("a",{href:"https://en.wikipedia.org/wiki/Time_(Unix)",target:"_blank",rel:"noreferrer"},"time"),a(" is used to determine the execution duration of a specified command and is often built-in as a shell command.")]),e("li",null,[e("a",{href:"https://github.com/Gabriella439/bench",target:"_blank",rel:"noreferrer"},"bench"),a(" is a more powerful alternative to "),e("code",null,"time"),a(" that can quickly measure some basic performance data.")])],-1),_=e("h2",{id:"further-reading",tabindex:"-1"},[a("Further Reading "),e("a",{class:"header-anchor",href:"#further-reading","aria-label":'Permalink to "Further Reading"'},"​")],-1),x=e("ul",null,[e("li",null,[e("a",{href:"https://github.com/sharkdp/hyperfine",target:"_blank",rel:"noreferrer"},"hyperfine GitHub Official Website")]),e("li",null,[e("a",{href:"https://www.mankier.com/1/hyperfine",target:"_blank",rel:"noreferrer"},"hyperfine - Man Page")]),e("li",null,[e("a",{href:"https://www.cnblogs.com/jyi2ya/p/17237806.html",target:"_blank",rel:"noreferrer"},"hyperfine User Guide")])],-1),w=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki github-dark vp-code-dark"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#79B8FF"}},"x"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"env"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"use"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"hyperfine")])])]),e("pre",{class:"shiki github-light vp-code-light"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#005CC5"}},"x"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"env"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"use"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"hyperfine")])])])],-1);function v(E,F,C,P,T,A){const t=o("PackagePage");return l(),i("div",null,[s(t,null,{default:n(()=>[d,h]),abstract:n(()=>[m,p,u,f,b,y,g,k,_,x]),install:n(()=>[w]),_:1})])}const N=r(c,[["render",v]]);export{S as __pageData,N as default};
