import{_ as i,C as a,o as r,c as n,H as l,w as s,k as e,a as t}from"./chunks/framework.98e11516.js";const H=JSON.parse('{"title":"mosquitto","titleTemplate":"x-cmd package | Message broker implementing the MQTT protocol","description":"x-cmd package mosquitto | Message broker implementing the MQTT protocol","frontmatter":{"name":"mosquitto","titleTemplate":"x-cmd package | Message broker implementing the MQTT protocol","head":[["meta",{"name":"og:title","content":"mosquitto | x-cmd package"}],["meta",{"name":"og:description","content":"Message broker implementing the MQTT protocol"}],["meta",{"name":"description","content":"x-cmd package mosquitto | Message broker implementing the MQTT protocol"}]],"links":[{"type":"1min","text":"mosquitto","link":"/1min/mosquitto"},{"type":"mod","text":"`x env` => usage","link":"/mod/env"}],"homepage":"https://mosquitto.org/","license":"MIT","version":{"stable":"v0.0.1"},"support":["linux/arm64","darwin/arm64","linux/x64","darwin/x64","win/x64"],"source":{"repack-official":["https://github.com/x-cmd-build/mosquitto/releases","https://gitcode.net/x-cmd-build/mosquitto/-/releases"]},"aside":false,"outline":false,"x-term-speg":"pkg/mosquitto.en","x-term-name":"mosquitto","x-term-desc":"Message broker implementing the MQTT protocol","x-term-size":"large"},"headers":[],"relativePath":"pkg/mosquitto.md","filePath":"pkg/mosquitto.md"}'),c={name:"pkg/mosquitto.md"},u=e("h1",{id:"mosquitto",tabindex:"-1"},[t("mosquitto "),e("a",{class:"header-anchor",href:"#mosquitto","aria-label":'Permalink to "mosquitto"'},"​")],-1),d=e("p",{class:"x-desc"},"Message broker implementing the MQTT protocol",-1),p=e("h2",{id:"introduction",tabindex:"-1"},[t("Introduction "),e("a",{class:"header-anchor",href:"#introduction","aria-label":'Permalink to "Introduction"'},"​")],-1),m=e("p",null,[e("code",null,"Mosquitto"),t(" is an open-source MQTT message broker designed to support message transmission for IoT (Internet of Things) and distributed applications. Initially developed by Eclipse, the project is now maintained and developed by the community. The design concept of Mosquitto is to provide a high-performance, lightweight, and scalable message broker to support reliable message delivery.")],-1),h=e("h2",{id:"key-features",tabindex:"-1"},[t("Key Features "),e("a",{class:"header-anchor",href:"#key-features","aria-label":'Permalink to "Key Features"'},"​")],-1),g=e("p",null,"Currently, Mosquitto provides the following key features:",-1),f=e("ul",null,[e("li",null,[t("Six subcommands: "),e("code",null,"Mosquitto"),t(" provides a set of subcommands including mosquitto, mosquitto_sub, mosquitto_pub, mosquitto_ctrl, mosquitto_rr, and mosquitto_passwd. These subcommands are used to start the broker, subscribe to topics, publish messages, initialize the broker instance, publish request messages and wait for responses, and manage password files.")]),e("li",null,"Public test server: Mosquitto provides a public test server test.mosquitto.org for testing and validating MQTT message delivery.")],-1),b=e("h2",{id:"first-time-users",tabindex:"-1"},[t("First-time Users "),e("a",{class:"header-anchor",href:"#first-time-users","aria-label":'Permalink to "First-time Users"'},"​")],-1),T=e("ol",null,[e("li",null,"This article provides a demo that explains how to use Mosquitto to subscribe to topics and send messages through those topics."),e("li",null,[t("x-cmd also provides a "),e("a",{href:"/1min/mosquitto"},"1-minute tutorial"),t(" to help you get started quickly.")])],-1),k=e("h2",{id:"technical-characteristics",tabindex:"-1"},[t("Technical Characteristics "),e("a",{class:"header-anchor",href:"#technical-characteristics","aria-label":'Permalink to "Technical Characteristics"'},"​")],-1),y=e("p",null,[t("As an MQTT broker, "),e("code",null,"Mosquitto"),t(" has several technical characteristics that make it a reliable message transmission solution for IoT and distributed applications. Here are some of Mosquitto's key technical characteristics:")],-1),_=e("ol",null,[e("li",null,"MQTT protocol support: Implements multiple versions of the MQTT protocol, including MQTT 5.0, 3.1.1, and 3.1. This means it can communicate with various MQTT clients and devices, supporting features and protocol specifications of multiple MQTT versions."),e("li",null,"Cross-platform compatibility: Highly cross-platform compatible, running on multiple operating systems including Linux, Windows, macOS, and various embedded systems. This allows developers to deploy Mosquitto brokers on different hardware and operating systems."),e("li",null,"Security: Provides multiple layers of security features, including username and password-based authentication, SSL/TLS encryption, and access control lists (ACL). These features ensure the confidentiality and integrity of MQTT messages during transmission."),e("li",null,"QoS support: Supports three different levels of Quality of Service (QoS 0, QoS 1, and QoS 2) in MQTT. This means message delivery can be tailored according to the requirements of different applications, ranging from no message loss to at least once delivery and exactly once delivery."),e("li",null,"Persistent messages: Supports persistent message storage, allowing it to receive and distribute messages even when clients are offline. This is crucial for ensuring message persistence and availability after client reconnection."),e("li",null,"WebSockets support: Supports MQTT over WebSockets, enabling browsers and mobile applications to connect to Mosquitto servers via WebSockets. This enhances the availability of MQTT in web applications."),e("li",null,"Cluster support: Has cluster functionality, allowing multiple Mosquitto servers to be configured for load balancing and high availability. This ensures system stability and scalability."),e("li",null,"Plugin system: Supports a plugin system that allows developers to write custom plugins to extend its functionality. This enables the addition of specific features based on project requirements.")],-1),v=e("p",null,"In summary, Mosquitto's technical characteristics include support for multiple versions of the MQTT protocol, cross-platform compatibility, security, QoS support, persistent messages, WebSockets support, cluster support, and a plugin system. These characteristics make it a powerful and flexible MQTT broker suitable for various IoT and distributed applications.",-1),q=e("h2",{id:"related-works",tabindex:"-1"},[t("Related Works "),e("a",{class:"header-anchor",href:"#related-works","aria-label":'Permalink to "Related Works"'},"​")],-1),M=e("ul",null,[e("li",null,[e("a",{href:"https://eclipse.dev/paho/",target:"_blank",rel:"noreferrer"},"Paho"),t(": Provides MQTT client library implementations in multiple languages.")]),e("li",null,[e("a",{href:"https://projects.eclipse.org/projects/iot.streamsheets",target:"_blank",rel:"noreferrer"},"Streamsheets"),t(": A user-friendly web-based real-time spreadsheet interface for handling incoming data from various sources such as MQTT, OPC-UA, and REST.")])],-1),x=e("h2",{id:"further-reading",tabindex:"-1"},[t("Further Reading "),e("a",{class:"header-anchor",href:"#further-reading","aria-label":'Permalink to "Further Reading"'},"​")],-1),w=e("ul",null,[e("li",null,[t("The project's hosted website "),e("a",{href:"https://github.com/eclipse/mosquitto",target:"_blank",rel:"noreferrer"},"GitHub"),t(" provides detailed usage instructions.")]),e("li",null,[e("a",{href:"https://mosquitto.org/",target:"_blank",rel:"noreferrer"},"Official Documentation")]),e("li",null,[e("a",{href:"http://www.steves-internet-guide.com/mossquitto-conf-file/",target:"_blank",rel:"noreferrer"},[t("Quick Guide to The "),e("code",null,"mosquitto"),t(".conf File With Examples")])]),e("li",null,[e("a",{href:"https://docs.foundries.io/73/tutorials/mosquitto.html",target:"_blank",rel:"noreferrer"},"How to Get Started with Mosquitto MQTT Broker Containers")])],-1),Q=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki github-dark vp-code-dark"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#79B8FF"}},"x"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"env"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"use"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"mosquitto")])])]),e("pre",{class:"shiki github-light vp-code-light"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#005CC5"}},"x"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"env"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"use"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"mosquitto")])])])],-1);function S(P,E,C,F,I,B){const o=a("PackagePage");return r(),n("div",null,[l(o,null,{default:s(()=>[u,d]),abstract:s(()=>[p,m,h,g,f,b,T,k,y,_,v,q,M,x,w]),install:s(()=>[Q]),_:1})])}const j=i(c,[["render",S]]);export{H as __pageData,j as default};
