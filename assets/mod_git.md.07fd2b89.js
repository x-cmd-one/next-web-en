import{_ as n,C as e,o as s,c as i,H as o,w as c,k as t,a,Y as l}from"./chunks/framework.98e11516.js";const D=JSON.parse('{"title":"x git","description":"x git | x-cmd module | x-cmd enhances the git command","frontmatter":{"head":[["meta",{"name":"og:title","content":"x git | x-cmd"}],["meta",{"name":"og:description","content":"x-cmd enhances the git command"}],["meta",{"name":"description","content":"x git | x-cmd module | x-cmd enhances the git command"}]]},"headers":[],"relativePath":"mod/git.md","filePath":"mod/git.md"}'),h={name:"mod/git.md"},p=t("h1",{id:"x-git",tabindex:"-1"},[a("x git "),t("a",{class:"header-anchor",href:"#x-git","aria-label":'Permalink to "x git"'},"​")],-1),g=t("p",{class:"x-desc"},"x-cmd enhances the git command",-1),m=l('<h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">git</span><span style="color:#929292;"> [OPTIONS] [FLAGS] [SUB_COMMAND]</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">#</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git</span><span style="color:#6C6C6C;"> [OPTIONS] [FLAGS] [SUB_COMMAND]</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">#</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h2 id="arguments" tabindex="-1">Arguments <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;Arguments&quot;">​</a></h2><div class="table-wrap"><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td><code>#n</code></td><td></td></tr></tbody></table></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><div class="table-wrap"><table><thead><tr><th>Name, Shorthand</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>-C</code> &lt;path&gt;</td><td></td><td>run as if git was started in given path</td></tr></tbody></table></div><h2 id="flags" tabindex="-1">Flags <a class="header-anchor" href="#flags" aria-label="Permalink to &quot;Flags&quot;">​</a></h2><div class="table-wrap"><table><thead><tr><th>Name, Shorthand</th><th>Description</th></tr></thead><tbody><tr><td><code>--paginate</code>, <code>-p</code></td><td>pipe output into a pager</td></tr><tr><td><code>--no-pager</code>, <code>-P</code></td><td>do not pipe output into a pager</td></tr><tr><td><code>--no-replace-objects</code></td><td>do not use replacement refs to replace git objects</td></tr><tr><td><code>--bare</code></td><td>use $PWD as repository</td></tr></tbody></table></div><h2 id="sub-commands" tabindex="-1">Sub Commands <a class="header-anchor" href="#sub-commands" aria-label="Permalink to &quot;Sub Commands&quot;">​</a></h2><div class="table-wrap"><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="/mod/git/br">x git br</a></td><td>enhance branch manager</td></tr><tr><td><a href="/mod/git/cfg">x git cfg</a></td><td>git config manager</td></tr><tr><td><a href="/mod/git/si">x git si</a></td><td>commit then push</td></tr><tr><td><a href="/mod/git/ci">x git ci</a></td><td>Record changes to the repository</td></tr><tr><td><a href="/mod/git/co">x git co</a></td><td>Switch branches or restore working tree files</td></tr><tr><td><a href="/mod/git/clone">x git clone</a></td><td>Clone a repository into a new directory</td></tr><tr><td><a href="/mod/git/last">x git last</a></td><td>Output the latest log information</td></tr><tr><td><a href="/mod/git/st">x git st</a></td><td>Show the working tree status</td></tr><tr><td><a href="/mod/git/unadd">x git unadd</a></td><td>Reset current HEAD to the specified state</td></tr><tr><td><a href="/mod/git/is">x git is</a></td><td>judging the git status</td></tr><tr><td><a href="/mod/git/meta">x git meta</a></td><td>git meta info getter</td></tr><tr><td><a href="/mod/git/rootout">x git rootout</a></td><td>Clear git staged content</td></tr><tr><td><a href="/mod/git/track">x git track</a></td><td>track and connect remote branch</td></tr><tr><td><a href="/mod/git/sync">x git sync</a></td><td>git command sync action</td></tr><tr><td><a href="/mod/git/--version">x git --version</a></td><td>display version information</td></tr><tr><td><a href="/mod/git/--man-path">x git --man-path</a></td><td>print the manpath for the man pages for this version of Git and exit</td></tr><tr><td><a href="/mod/git/--info-path">x git --info-path</a></td><td>print the path where the info files are installed and exit</td></tr><tr><td><a href="/mod/git/--help">x git --help</a></td><td></td></tr></tbody></table></div><br>',11),u=t("h2",{id:"related-link",tabindex:"-1"},[a("Related Link "),t("a",{class:"header-anchor",href:"#related-link","aria-label":'Permalink to "Related Link"'},"​")],-1),f=t("div",{class:"tip custom-block"},[t("p",{class:"custom-block-title"},"TIP"),t("p",null,[a("In interactive terminal ( zsh, bash ... ), Can use "),t("kbd",null,"Tab"),a(" to get completion information")]),t("p",null,[a("Run "),t("code",null,"CMD SUBCOMMAND --help"),a(" for more information on a command")])],-1);function b(x,_,y,k,C,v){const d=e("AdsContent"),r=e("DocsLinkCard");return s(),i("div",null,[p,g,o(d),m,o(r,null,{default:c(()=>[u]),_:1}),f])}const E=n(h,[["render",b]]);export{D as __pageData,E as default};
