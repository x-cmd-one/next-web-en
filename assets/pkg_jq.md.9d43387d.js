import{_ as i,C as n,o,c as r,H as l,w as a,k as e,a as t}from"./chunks/framework.98e11516.js";const H=JSON.parse('{"title":"jq","titleTemplate":"x-cmd package | jq is a lightweight and flexible command-line JSON processor","description":"x-cmd package jq | jq is a lightweight and flexible command-line JSON processor","frontmatter":{"name":"jq","titleTemplate":"x-cmd package | jq is a lightweight and flexible command-line JSON processor","head":[["meta",{"name":"og:title","content":"jq | x-cmd package"}],["meta",{"name":"og:description","content":"jq is a lightweight and flexible command-line JSON processor"}],["meta",{"name":"description","content":"x-cmd package jq | jq is a lightweight and flexible command-line JSON processor"}]],"links":[{"type":"1min","text":"jq","link":"/1min/jq"},{"type":"mod","text":"`x env` => usage","link":"/mod/env"}],"homepage":"https://github.com/jqlang/jq","license":"MIT","version":{"stable":"v0.0.1"},"support":["linux/arm64","darwin/arm64","linux/x64","darwin/x64","win/x64"],"source":{"x-cmd":["https://github.com/x-cmd-build/jq/releases","https://gitcode.net/x-cmd-build/jq/-/releases"]},"aside":false,"outline":false,"x-term-speg":"pkg/jq.en","x-term-name":"jq","x-term-desc":"jq is a lightweight and flexible command-line JSON processor","x-term-size":"large"},"headers":[],"relativePath":"pkg/jq.md","filePath":"pkg/jq.md"}'),c={name:"pkg/jq.md"},d=e("h1",{id:"jq",tabindex:"-1"},[t("jq "),e("a",{class:"header-anchor",href:"#jq","aria-label":'Permalink to "jq"'},"​")],-1),h=e("p",{class:"x-desc"},"jq is a lightweight and flexible command-line JSON processor",-1),m=e("h2",{id:"introduction",tabindex:"-1"},[t("Introduction "),e("a",{class:"header-anchor",href:"#introduction","aria-label":'Permalink to "Introduction"'},"​")],-1),u=e("p",null,"jq is a lightweight command-line JSON processing tool developed by Stephen Dolan in 2012. Currently, the latest stable version of jq is 1.6, released in 2018.",-1),p=e("p",null,"With its concise syntax and powerful capabilities, jq can efficiently extract specific fields, filter and sort data, perform complex transformations and calculations, and more from JSON data.",-1),g=e("ol",null,[e("li",null,"Efficiency with C development: jq is developed using the C programming language and includes optimizations, making it highly efficient when processing large JSON data."),e("li",null,"Unique stream-based language for flexible usage: jq's distinctive design as a stream-based language allows for flexibility. It comes with useful built-in functions and operators for handling various data types such as strings, numbers, and dates, and can also handle conversions between JSON, CSV, and TSV formats."),e("li",null,"Rich official documentation: The official jq documentation provides a wealth of resources, including a manual, tutorial, and examples.")],-1),f=e("h2",{id:"quick-start-guide-for-first-time-users",tabindex:"-1"},[t("Quick Start Guide for First-time Users "),e("a",{class:"header-anchor",href:"#quick-start-guide-for-first-time-users","aria-label":'Permalink to "Quick Start Guide for First-time Users"'},"​")],-1),x=e("p",null,"For users new to jq, you can refer to the following links to quickly get started with jq in 1-2 minutes.",-1),q=e("ul",null,[e("li",null,[t("x-cmd provides a "),e("a",{href:"/1min/jq"},"1-minute tutorial on jq"),t(", allowing you to experience it immediately.")]),e("li",null,[e("a",{href:"https://jqplay.org/",target:"_blank",rel:"noreferrer"},"Web-based quick trial")]),e("li",null,[t("The official "),e("a",{href:"https://jqlang.github.io/jq/tutorial/",target:"_blank",rel:"noreferrer"},"quick start tutorial"),t(" provides a practical example using JSON data returned by the GitHub API. It demonstrates how to extract the desired data and construct a new JSON result. This example is highly actionable and recommended for initial users to try out.")])],-1),j=e("h2",{id:"jq-as-an-elegant-stream-processing-language",tabindex:"-1"},[t("jq as an Elegant Stream Processing Language "),e("a",{class:"header-anchor",href:"#jq-as-an-elegant-stream-processing-language","aria-label":'Permalink to "jq as an Elegant Stream Processing Language"'},"​")],-1),y=e("p",null,"When examining jq from a language perspective, you can easily see its unique design as a stream processing language. The merits and drawbacks of this design often depend on specific scenarios and preferences. Many people, including the author, may initially find this mindset unfamiliar.",-1),b=e("p",null,"However, this is precisely what the author believes makes jq worth exploring - it is so distinctive that it often brings new inspiration.",-1),_=e("h2",{id:"slow-startup-outstanding-performance",tabindex:"-1"},[t("Slow Startup, Outstanding Performance "),e("a",{class:"header-anchor",href:"#slow-startup-outstanding-performance","aria-label":'Permalink to "Slow Startup, Outstanding Performance"'},"​")],-1),k=e("p",null,"When it comes to command-line JSON processing, jq stands out in terms of popularity and widespread usage. However, in many comparative reports of related emerging software, its performance often falls short.",-1),w=e("p",null,`During the development of the json processing tools (jo and ja) in x-cmd, the author also discovered this through comparative tests. However, it was quickly realized that jq's "slowness" primarily refers to its startup time - regardless of data size, the startup time is at least 30ms. Once it gets going, its processing efficiency is very high.`,-1),v=e("p",null,"However, the author has not read the jq source code, and the above conclusion is based on multiple comparisons during the development of jo and ja. However, we are confident in this conclusion. Readers may observe that many tools claiming to be faster than jq in tests are generally only faster when processing small data - and the time jq takes in tests is around 30ms.",-1),S=e("h2",{id:"similar-tools",tabindex:"-1"},[t("Similar Tools "),e("a",{class:"header-anchor",href:"#similar-tools","aria-label":'Permalink to "Similar Tools"'},"​")],-1),O=e("ol",null,[e("li",null,[t("If you want to work with YAML or TOML, yq is a good choice. This tool is written in Go and designed with reference to jq. It supports XPath expressions and can handle YAML, JSON, XML, CSV, and TOML formats. x-cmd has included it, please refer to "),e("a",{href:"https://x-cmd.com/pkg/yq",target:"_blank",rel:"noreferrer"},"yq"),t(".")]),e("li",null,[t("dasel is a command-line solution that supports multiple formats (JSON, CSV, YAML, XML). We think its functionality is slightly inferior but it excels in simplicity and ease of use, making it suitable for most scenarios. x-cmd has included it, please refer to "),e("a",{href:"https://x-cmd.com/pkg/dasel",target:"_blank",rel:"noreferrer"},"dasel"),t(".")])],-1),E=e("h2",{id:"further-exploration",tabindex:"-1"},[t("Further Exploration "),e("a",{class:"header-anchor",href:"#further-exploration","aria-label":'Permalink to "Further Exploration"'},"​")],-1),N=e("ul",null,[e("li",null,[t("Difficulties in handling jq's syntax - If you want to explore more examples, you can check out the "),e("a",{href:"https://x-cmd.com/cb/jq",target:"_blank",rel:"noreferrer"},"jq cookbook"),t(" provided by the x-cmd team.")]),e("li",null,"If you want to delve deeper, you can refer to the aforementioned official documentation and choose the chapters that interest you."),e("li",null,[t("The x-cmd team has also provided a comprehensive overview of jq's ecosystem and reference articles. Feel free to read it "),e("a",{href:"https://x-cmd.com/awesome/jq",target:"_blank",rel:"noreferrer"},"here"),t(".")])],-1),P=e("div",{class:"language-sh vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"sh"),e("pre",{class:"shiki github-dark vp-code-dark"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#79B8FF"}},"x"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"env"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"use"),e("span",{style:{color:"#E1E4E8"}}," "),e("span",{style:{color:"#9ECBFF"}},"jq")])])]),e("pre",{class:"shiki github-light vp-code-light"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{color:"#005CC5"}},"x"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"env"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"use"),e("span",{style:{color:"#24292E"}}," "),e("span",{style:{color:"#032F62"}},"jq")])])])],-1);function F(J,C,T,I,L,M){const s=n("PackagePage");return o(),r("div",null,[l(s,null,{default:a(()=>[d,h]),abstract:a(()=>[m,u,p,g,f,x,q,j,y,b,_,k,w,v,S,O,E,N]),install:a(()=>[P]),_:1})])}const V=i(c,[["render",F]]);export{H as __pageData,V as default};
